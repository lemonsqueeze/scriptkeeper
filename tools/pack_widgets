#!/usr/bin/perl
$xml=$ARGV[0];
open(IN, "< $xml") || die("pack_widgets: couldn't open file $xml");
my @lines = <IN>;

sub format_html_blob
{
    my ($s) = @_;
    # remove newlines.
    $s =~ s|\n||mg;
    # squish leading/trailing spaces
    $s =~ s|^[ \n\t]*||;
    $s =~ s|[ \n\t]*$||;
    # squish space between tags
    $s =~ s|>[ \n\t]*<|><|g;
    # squish even more spaces =P
    $s =~ s|>[ \n\t]*|>|g;
    $s =~ s|[ \n\t]*<|<|g;
    return $s;
}

my $id = "";
my @current_widget;

sub dump_widget
{
    my ($last) = @_;
    return if ($id eq "");
    print "      '$id' : '";
    print format_html_blob(join('', @current_widget));
    print "'";
    print "," if ($last eq "");
    print "\n";

    @current_widget = ();
    $id = "";
}

sub dump_widget_layouts
{
    foreach my $s (@lines)
    {
	# remove comments
	$s =~ s|<!--[^>]*-->||g;

	if ($s =~ m|<widget name="([^"]*)"([^>]*)>|)
	{
	    my ($new_id, $args) = ($1, $2);
	    dump_widget("");
	    $id = $new_id;   
	}
	elsif ($s =~ m|<widget .*>|) # sanity check
	{  die($s . "\nlooks like name=\"widget name\" attribute is missing"); }

	if ($s =~ m|<widgets *>|   ||
	    $s =~ m|</widgets *>|  )
	{ next; }

	if ($id ne "")
	{  push(@current_widget, $s); }
    }
    dump_widget("last");
}

print("    /* layout for each widget (generated from $xml). */\n");
print("    var widgets_layout = {\n");
dump_widget_layouts();
print("    };\n\n");


sub widget_init_proxy_functions
{
    foreach my $s (@lines)
    {
	# remove comments
	$s =~ s|<!--[^>]*-->||g;

	if ($s =~ m|<widget name="([^"]*)"([^>]*)>|)
	{
	    my ($id, $args_str) = ($1, $2);
	    my @args = split(" ", $args_str);
	    @args = grep(!/init/, @args);

	    if (@args == 0)
	    {  next;   } # these are rather useless 
	    print "    function ${id}_init_proxy(w, ph)\n";
	    print "    {\n";
	    print "        ${id}_init(w";
	    foreach my $arg (@args)
	    {  print ", ph.$arg";  }
	    print ");\n";
	    print "    }\n\n";
	}
    }
}

print("    /* init proxies (internal use only) */\n");
widget_init_proxy_functions();


sub widget_new_functions
{
    foreach my $s (@lines)
    {
	# remove comments
	$s =~ s|<!--[^>]*-->||g;

	if ($s =~ m|<widget name="([^"]*)"([^>]*)>|)
	{
	    my ($id, $args_str) = ($1, $2);
	    my @args = split(" ", $args_str);
	    @args = grep(!/init/, @args);

	    if (@args == 0)
	    {
		next; # these are rather useless
		print "    function new_$id()\n";
		print "    {\n";
		print "        return new_widget(\"$id\");\n";
		print "    }\n\n";
	    }
	    print "    function new_$id(" . join(", ", @args) . ")\n";
	    print "    {\n";
	    print "      return new_widget(\"$id\", function(w)\n";
	    print "        {\n";
	    print "          ${id}_init(w";
	    foreach my $arg (@args)
	    {  print ", $arg";  }
	    print ");\n";
	    print "        });\n";
	    print "    }\n\n";
	}
    }
}

print("    /* functions for creating widgets */\n");
widget_new_functions();
