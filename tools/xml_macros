#!/usr/bin/perl
# expand xml macros

# explain what is found
my $debug = 0;
my @lines = <STDIN>;
@lines = split_tags(@lines);

# fix newlines: one tag per line max, and no split tags.
sub split_tags
{
    my $s = join(' ', @_);
    $s =~ s|\n| |g;
    $s =~ s|>|>\n|g;
    $s =~ s|<|\n<|g;
    return split(/\n/, $s);
}

my @content;		# without macros
my %macros;		# macro definitions (string)
my %macros_args;	# macros arguments  (array)
my $def = "";
my $args = "";
# first get macro definitions
foreach my $s (@lines)
{
    if ($s =~ m|</def>|  )
    { 
	print "found def: $def\n" if ($debug);
	$def = "";
	next;
    }
    if ($def ne "")
    {
	$macros{$def} .= $s;
	next;
    }
    if ($s =~ m|<def .*>|  )
    {   
	if (!($s =~ m|<def  *macro="([^" ]+)"(.*)>|  ))		# sanity check
	{  die("${s}Couldn't parse this <def> tag, aborting."); }
	($def, $args) = ($1, $2);
	my @tmp = split(" ", $args);
	$macros_args{$def} = \@tmp;
    }

    if ($def eq "")
    {  push(@content, $s);  }
}

sub parse_args
{
    my ($s, $name) = @_;
    my $orig = $s;
    my %args;
    while ($s =~ s| *([\w]+)="([^"]*)"||)
    {
	my ($name, $value) = ($1, $2);
	#print "name: $name val: $value\n";
	$args{$name} = $value;
    }
    if (!($s =~ m|^[ \t]*$|))
    { die("<$name $orig> : '$s' bad attribute (missing '\"' maybe ?)"); }
    return %args;
}

sub defined_macro
{
    my ($name) = @_;
    return $macros{$name} ne "";
}

$did_something;
sub replace_macro
{
    my ($s, $name, $arg_str, $type) = @_;

    if (!defined_macro($name))
    { return $s; }

    # tag closing sanity checks
    if (!($name =~ m|^/|))	# not a closing tag
    {
	if ($type eq "self_closing" && defined_macro("/$name"))
	{  die("${s}\nThis tag is self-closing, but /$name is defined !"); }
	if ($type eq "open" && !defined_macro("/$name"))
	{  die("${s}\nopen <$name> tag found. should be <$name/>, aborting\n");  }
    }

    $did_something = 1;
    print "replacing $name\n" if ($debug);
    %args = parse_args($arg_str, $name);

    # replace given arguments
    my $s = $macros{$name};
    foreach my $arg (keys(%args))
    {	$s =~ s|\$$arg|$args{$arg}|gm;    }

    # blank out undefined args
    foreach my $arg (@{$macros_args{$name}})
    {	$s =~ s|\$$arg||gm;    }
    
    return $s;
}

# and replace them

do
{
    $did_something = 0;
    my @tmp = ();
    foreach my $s (@content)
    {
	# self-closing macro tags
	if ($s =~ m|<([/\w]+) */>|)
	{
	    my $name = $1;
	    $s = replace_macro($s, $name, "", "self_closing");
	}
	elsif ($s =~ m|<([/\w]+) ([^>]*)/>|)
	{
	    my ($name, $args) = ($1, $2);
	    $s = replace_macro($s, $name, $args, "self_closing");
	}    

	# open macro tags
	elsif ($s =~ m|<([/\w]+) *>|)
	{
	    my $name = $1;
	    $s = replace_macro($s, $name, "", "open");
	}
	elsif ($s =~ m|<([/\w]+) ([^>]*)>|)
	{
	    my ($name, $args) = ($1, $2);
	    $s = replace_macro($s, $name, $args, "open");
	}    

	push(@tmp, $s);
    }
    
    #@content = @tmp;
#split("\n", join("\n", @tmp));
    @content = split_tags(@tmp);
} while ($did_something);

if ($debug)
{  print "---------------------------------------------------------\n";  }

# print output
foreach my $s (@content)
{    print "$s\n";    }
